swagger: "2.0"
info:
  title: DareData FlaskAPI - Swagger 2.0
  description: |-
    This is a Flask app prototype to send data through Aws Kinesis Firehose to a data lake in Aws S3.

    Some useful links:
    - [The creator's Linkdin](https://www.linkedin.com/in/welfi-kharroubi-935291221/)
    - [The DareData Website](https://www.daredata.engineering)
  termsOfService: http://swagger.io/terms/
  contact:
    email: welfi.kharroubi1@esprit.tn
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
tags:
  - name: Tracker API
consumes:
  - application/json
paths:
  /track:
    post:
      tags:
        - Tracker API
      summary: Log events related with a particular user
      description: |-
        In order to log an event you will be required to provide an userId and 
        an eventName. You can add more metadata to the log depending on the
        kind of event that you are logging.
      operationId: track_post
      parameters:
        - in: body
          name: track
          description: The track to log.
          schema:
            type: object
            required:
              - userId
              - eventName
              - timestampUTC
            properties:
              userId:
                type: string
              eventName:
                type: string
              metadata:
                type: string
              timestampUTC:
                type: string
      responses:
        "200":
          description: OK
  /alias:
    post:
      tags:
        - Tracker API
      summary: Assotiate different identifiers to the same entity.
      description:
        "Set up a link between the events registered with different userIds.\
        \ \n\nFor example when a user arrives to your website and you start to log\
        \  events, you may want to associate the events with a generated ID  that\
        \ is associated with a cookie. Then, say the user registers and the email\
        \ address becomes known which means that we now have the ability to associate\
        \ the previous browsing events with an email address.\n\nAt this point you\
        \ would issue the request with the `newUserId` set to the email address and\
        \ the `originalUserId` set to the originally generated ID."
      operationId: alias_post
      parameters:
        - in: body
          name: newUser
          description: The user to update.
          schema:
            type: object
            required:
              - newUserId
              - originalUserId
              - timestampUTC
            properties:
              newUserId:
                type: string
              originalUserId:
                type: string
              timestampUTC:
                type: string
      responses:
        "200":
          description: OK
  /profile:
    post:
      tags:
        - Tracker API
      summary: Save profile attributes for an particular user
      description: |-
        This endpoint allows us to save information related to a particular user that either changes very infrequently or does not change at all. For example, birthday, native language, and home country.

        If a profile does not exist for a user, it is created the first time you execute a `/profile` call. Subsequent calls will merge the new information with the old information in the case that the keys don't exist. In the case where keys already exist, the latest call replaces the old value with the new one.
      operationId: profile_post
      parameters:
        - in: body
          name: profile
          description: The profile to create/update.
          schema:
            type: object
            required:
              - userId
              - attributes
              - timestampUTC
            properties:
              userId:
                type: string
              attributes:
                type: object
              timestampUTC:
                type: string
      responses:
        "200":
          description: OK
